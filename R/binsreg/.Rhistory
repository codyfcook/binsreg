selectfullON <- F
if (selection!="U" & samebinsby) selectfullON <- T
if (selectfullON) {
# effective size
eN <- N <- length(x)
if (massadj) {
Ndist <- length(unique(x))
eN <- min(eN, Ndist)
}
if (!is.null(cluster)) {
Nclust <- length(unique(cluster))
eN <- min(eN, Nclust)
}
# check if rot can be implemented
if (is.null(nbinsrot)) {
if (is.null(bins.p)) binspcheck <- 6
else                 binspcheck <- bins.p
if (eN <= dfcheck[1]+binspcheck+1+qrot) {
warning("too small effective sample size for bin selection.")
stop()
}
}
if (is.na(Ndist))  {
Ndist.sel <- NULL
} else {
Ndist.sel <- Ndist
}
if (is.na(Nclust)) {
Nclust.sel <- NULL
} else {
Nclust.sel <- Nclust
}
randcut1k <- randcut
if (is.null(randcut) & N>5000) {
randcut1k <- max(5000/N, 0.01)
warning("To speed up computation, bin/degree selection uses a subsample of roughly max(5000, 0.01n) observations if the sample size n>5000. To use the full sample, set randcut=1.")
}
if (selection=="J") {
binselect <- binsregselect(y, x, w, deriv=deriv,
bins=c(bins.p,bins.s), binspos=binspos, nbins=T,
binsmethod=binsmethod, nbinsrot=nbinsrot,
vce=vce.select, cluster=cluster, randcut=randcut1k,
dfcheck=dfcheck, masspoints=masspoints, weights=weights,
numdist=Ndist.sel, numclust=Nclust.sel)
if (is.na(binselect$nbinsrot.regul)) {
print("Bin selection fails.")
stop()
}
if (binsmethod == "rot") {
nbins_all <- binselect$nbinsrot.regul
imse.v.rot <- rep(binselect$imse.var.rot, ngroup)
imse.b.rot <- rep(binselect$imse.bsq.rot, ngroup)
} else if (binsmethod == "dpi") {
nbins_all <- binselect$nbinsdpi
imse.v.dpi <- rep(binselect$imse.var.dpi, ngroup)
imse.b.dpi <- rep(binselect$imse.bsq.dpi, ngroup)
if (is.na(nbins)) {
warning("DPI selection fails. ROT choice used.")
nbins_all <- binselect$nbinsrot.regul
imse.v.rot <- rep(binselect$imse.var.rot, ngroup)
imse.b.rot <- rep(binselect$imse.bsq.rot, ngroup)
}
}
} else if (selection=="P") {
binselect <- binsregselect(y, x, w, deriv=deriv,
binspos=binspos, nbins=nbins_all,
pselect=plist, sselect=slist,
binsmethod=binsmethod, nbinsrot=nbinsrot,
vce=vce.select, cluster=cluster, randcut=randcut1k,
dfcheck=dfcheck, masspoints=masspoints, weights=weights,
numdist=Ndist.sel, numclust=Nclust.sel)
if (is.na(binselect$prot.regul)) {
print("Bin selection fails.")
stop()
}
if (binsmethod == "rot") {
bins.p <- binselect$prot.regul
bins.s <- binselect$srot.regul
imse.v.rot <- rep(binselect$imse.var.rot, ngroup)
imse.b.rot <- rep(binselect$imse.bsq.rot, ngroup)
} else if (binsmethod == "dpi") {
bins.p <- binselect$pdpi
bins.s <- binselect$sdpi
imse.v.dpi <- rep(binselect$imse.var.dpi, ngroup)
imse.b.dpi <- rep(binselect$imse.bsq.dpi, ngroup)
if (is.na(bins.p)) {
warning("DPI selection fails. ROT choice used.")
bins.p <- binselect$prot.regul
bins.s <- binselect$srot.regul
imse.v.rot <- rep(binselect$imse.var.rot, ngroup)
imse.b.rot <- rep(binselect$imse.bsq.rot, ngroup)
}
}
tsha.p <- bins.p+1; tsha.s <- bins.s+1
}
}
# Generate knot using the full sample if needed
if ((selectfullON | (selection=="U" & samebinsby)) & is.null(knot)) {
knotlistON <- T
if (es) {
knot <- genKnot.es(xmin, xmax, nbins_all)
} else {
knot <- genKnot.qs(x, nbins_all)
}
}
knot_all <- NULL
if (knotlistON) {
knot_all <- knot    # universal knot sequence
}
##########################################
if (!is.null(simsseed)) set.seed(simsseed)
# common grid (within the common support of all groups)
uni_grid <- seq(max(xminmat), min(xmaxmat), length=simsgrid+2)[-c(1,simsgrid+2)]
# dots grid for plotting (within the common support of all groups)
if (plot) if (dotsngrid!=0) {
dots_grid <- seq(max(xminmat), min(xmaxmat), length=dotsngrid+2)[-c(1,dotsngrid+2)]
}
tot.num <- ngroup*(ngroup-1)/2    # total number of comparisons
if (plot) {
if (length(colors)==0) {
colors <- c("navy", "maroon", "forestgreen", "darkorange", "lavenderblush3",
"khaki", "sienna", "steelblue", "brown", "gold", "gray45")
colors <- rep(colors, length.out=tot.num)
} else {
colors <- rep(colors, length.out=tot.num)
}
if (length(symbols)==0) {
symbols <- c(19, 15:18, 0:14)
symbols <- rep(symbols, length.out=tot.num)
} else {
symbols <- rep(symbols, length.out=tot.num)
}
}
# adjust w variables
if (!is.null(w)) {
if (is.character(at)) {
if (at=="mean") {
eval.w <- colWeightedMeans(x=w, w=weights)
if (!is.null(w.factor)) eval.w[w.factor] <- 0
} else if (at=="median") {
eval.w <- colWeightedMedians(x=w, w=weights)
if (!is.null(w.factor)) eval.w[w.factor] <- 0
} else if  (at=="zero") {
eval.w <- rep(0, nwvar)
}
} else if (is.vector(at)) {
eval.w <- at
} else if (is.data.frame(at)) {
eval.w <- eval.w
}
} else {
eval.w <- NULL
}
##################################################################
N.by <- Ndist.by <- Nclust.by <- nbins.by <- NULL   # save results
fit.sha <- se.sha <- nummat <- denom <- dots.fit <- list()
tstat <- matrix(NA, tot.num, 3); pval <- cval.cb <- matrix(NA, tot.num, 1)
counter <- 1
data.plot <- list()   # data for plotting all comparisons
##################################################################
##################### ENTER the loop #############################
##################################################################
for (i in 1:ngroup) {
# Take subsample
sub <- (by == byvals[i])
y.sub <- y[sub]; x.sub <- x[sub]; w.sub <- w[sub, , drop = F]
cluster.sub <- cluster[sub]; weights.sub <- weights[sub]
# Effective size
xmin <- min(x.sub); xmax <- max(x.sub)
eN <- N <- length(x.sub)
N.by <- c(N.by, N)
Ndist <- NA
if (massadj) {
Ndist <- length(unique(x.sub))
eN <- min(eN, Ndist)
}
Ndist.by <- c(Ndist.by, Ndist)
Nclust <- NA
if (!is.null(cluster.sub)) {
Nclust <- length(unique(cluster.sub))
eN <- min(eN, Nclust)
}
Nclust.by <- c(Nclust.by, Nclust)
#########################################################
############### Bin selection within loop ###############
nbins <- NULL; knot <- NULL                       # initialize again
if (!is.null(nbins_all)) nbins <- nbins_all
if (len_bynbins>1)   nbins <- bynbins[i]
if (selection!="U" & !knotlistON) {
# check if rot can be implemented
if (is.null(bins.p)) binspcheck <- 6
else                 binspcheck <- bins.p
if (is.null(nbinsrot)) if (eN <= dfcheck[1]+binspcheck+1+qrot) {
warning("too small effective sample size for bin selection.")
stop()
}
if (is.na(Ndist))  {
Ndist.sel <- NULL
} else {
Ndist.sel <- Ndist
}
if (is.na(Nclust)) {
Nclust.sel <- NULL
} else {
Nclust.sel <- Nclust
}
randcut1k <- randcut
if (is.null(randcut) & N>5000) {
randcut1k <- max(5000/N, 0.01)
warning("To speed up computation, bin/degree selection uses a subsample of roughly max(5000, 0.01n) observations if the sample size n>5000. To use the full sample, set randcut=1.")
}
if (selection=="J") {
binselect <- binsregselect(y.sub, x.sub, w.sub, deriv=deriv,
bins=c(bins.p,bins.s), binspos=binspos, nbins=T,
binsmethod=binsmethod, nbinsrot=nbinsrot,
vce=vce.select, cluster=cluster.sub, randcut=randcut1k,
dfcheck=dfcheck, masspoints=masspoints, weights=weights.sub,
numdist=Ndist.sel, numclust=Nclust.sel)
if (is.na(binselect$nbinsrot.regul)) {
print("Bin selection fails.")
stop()
}
if (binsmethod == "rot") {
nbins <- binselect$nbinsrot.regul
imse.v.rot[i] <- binselect$imse.var.rot
imse.b.rot[i] <- binselect$imse.bsq.rot
} else if (binsmethod == "dpi") {
nbins <- binselect$nbinsdpi
imse.v.dpi[i] <- binselect$imse.var.dpi
imse.b.dpi[i] <- binselect$imse.bsq.dpi
if (is.na(nbins)) {
warning("DPI selection fails. ROT choice used.")
nbins <- binselect$nbinsrot.regul
imse.v.rot[i] <- binselect$imse.var.rot
imse.b.rot[i] <- binselect$imse.bsq.rot
}
}
} else if (selection=="P") {
binselect <- binsregselect(y.sub, x.sub, w.sub, deriv=deriv,
binspos=binspos, nbins=nbins,
pselect=plist, sselect=slist,
binsmethod=binsmethod, nbinsrot=nbinsrot,
vce=vce.select, cluster=cluster.sub, randcut=randcut1k,
dfcheck=dfcheck, masspoints=masspoints, weights=weights.sub,
numdist=Ndist.sel, numclust=Nclust.sel)
if (is.na(binselect$prot.regul)) {
print("Bin selection fails.")
stop()
}
if (binsmethod == "rot") {
bins.p <- binselect$prot.regul
bins.s <- binselect$srot.regul
imse.v.rot[i] <- binselect$imse.var.rot
imse.b.rot[i] <- binselect$imse.bsq.rot
} else if (binsmethod == "dpi") {
bins.p <- binselect$pdpi
bins.s <- binselect$sdpi
imse.v.dpi[i] <- binselect$imse.var.dpi
imse.b.dpi[i] <- binselect$imse.bsq.dpi
if (is.na(bins.p)) {
warning("DPI selection fails. ROT choice used.")
bins.p <- binselect$prot.regul
bins.s <- binselect$srot.regul
imse.v.rot[i] <- binselect$imse.var.rot
imse.b.rot[i] <- binselect$imse.bsq.rot
}
}
tsha.p <- bins.p+1; tsha.s <- bins.s+1
}
}
if (knotlistON) {
nbins <- length(knot_all)-1
knot  <- knot_all
}
pwc.p.by[i] <- tsha.p; pwc.s.by[i] <- tsha.s
###########################################
# Checking for each case
if ((nbins-1)*(tsha.p-tsha.s+1)+tsha.p+1+dfcheck[2]>=eN) {
warning("too small effective sample size for testing shape.")
}
####################################
########### Generate knot ##########
####################################
if (is.null(knot)) {
if (es) knot <- genKnot.es(xmin, xmax, nbins)
else    knot <- genKnot.qs(x.sub, nbins)
}
# knot for few mass points
knot <- c(knot[1], unique(knot[-1]))
if (nbins!=length(knot)-1) {
warning("Repeated knots. Some bins dropped.")
nbins <- length(knot)-1
}
# NOW, save nbins
nbins.by <- c(nbins.by, nbins)
# check local mass points
if (localcheck) {
uniqmin <- binsreg.checklocalmass(x.sub, nbins, es, knot=knot) # mimic STATA
if (uniqmin < tsha.p+1) {
warning("Some bins have too few distinct values of x for testing.")
}
}
#######################################
###### Estimation #####################
#######################################
B    <- binsreg.spdes(eval=x.sub, p=tsha.p, s=tsha.s, knot=knot, deriv=0)
k    <- ncol(B)
P    <- cbind(B, w.sub)
if (estmethod=="reg") {
model <- lm(y.sub ~ P-1, weights=weights.sub)
} else if (estmethod=="qreg") {
model <- do.call(rq, c(list(formula=y.sub ~ P-1, tau=quantile, weights=weights.sub), estmethodopt))
} else if (estmethod=="glm") {
model <- do.call(glm, c(list(formula=y.sub ~ P-1, family=family, weights=weights.sub), estmethodopt))
}
beta <- model$coeff[1:k]
basis.sha <- binsreg.spdes(eval=uni_grid, p=tsha.p, s=tsha.s, knot=knot, deriv=deriv)
if (estmethod=="glm" & (!nolink)) {
pred.sha <- binsreg.pred(X=basis.sha, model=model, type="all",
vce=vce, cluster=cluster.sub, deriv=deriv, wvec=eval.w, avar=asyvar)
basis.0     <- binsreg.spdes(eval=uni_grid, p=tsha.p, s=tsha.s, knot=knot, deriv=0)
fit.0       <- binsreg.pred(basis.0, model, type = "xb", vce=vce, cluster=cluster.sub, deriv=0, wvec=eval.w)$fit
pred.sha.0  <- linkinv.1(fit.0)
if (asyvar | deriv==0) {
pred.sha$se  <- pred.sha.0 * pred.sha$se
if (deriv == 0) pred.sha$fit <- linkinv(pred.sha$fit)
if (deriv == 1) pred.sha$fit <- pred.sha.0 * pred.sha$fit
} else {
basis.sha.0 <- basis.0
basis.sha.1 <- basis.sha
if (!is.null(eval.w)) {
basis.sha.0 <- cbind(basis.0, outer(rep(1, nrow(basis.0)), eval.w))
basis.sha.1 <- cbind(basis.sha.1, outer(rep(1, nrow(basis.sha.1)), rep(0, nwvar)))
}
basis.all <- linkinv.2(fit.0)*pred.sha$fit*basis.sha.0 + pred.sha.0*basis.sha.1
pred.sha$fit <- pred.sha.0 * pred.sha$fit
pred.sha$se  <- binsreg.pred(basis.all, model=model, type="se",
vce=vce, cluster=cluster.sub, avar=T)$se
}
} else {
if (estmethod=="qreg") {
pred.sha  <- binsreg.pred(basis.sha, model, type = "all", vce=vce,
cluster=cluster.sub, deriv=deriv, wvec=eval.w,
is.qreg=TRUE, avar=asyvar, ...)
} else {
pred.sha  <- binsreg.pred(basis.sha, model, type = "all", vce=vce,
cluster=cluster.sub, deriv=deriv, wvec=eval.w, avar=asyvar)
}
}
fit.sha[[i]] <- pred.sha$fit
se.sha[[i]]  <- pred.sha$se
pos   <- !is.na(beta)
k.new <- sum(pos)
if (estmethod=="qreg") vcv.sha <- binsreg.vcov(model, type=vce, cluster=cluster.sub, is.qreg=TRUE, ...)[1:k.new, 1:k.new]
else                   vcv.sha <- binsreg.vcov(model, type=vce, cluster=cluster.sub)[1:k.new, 1:k.new]
Sigma.root <- lssqrtm(vcv.sha)
nummat[[i]] <- basis.sha[,pos,drop=F] %*% Sigma.root
denom[[i]]  <- sqrt(rowSums((basis.sha[, pos, drop=F] %*% vcv.sha) * basis.sha[, pos, drop=F]))
# prepare point estimates for plotting
if (plot & dotsngrid!=0) {
if (!is.null(bins.p) & !is.null(bins.s)) {
est.p <- bins.p; est.s <- bins.s
# since p and s for point estimates are different, run regression again
B    <- binsreg.spdes(eval=x.sub, p=est.p, s=est.s, knot=knot, deriv=0)
k    <- ncol(B)
P    <- cbind(B, w.sub)
if (estmethod=="reg") {
model <- lm(y.sub ~ P-1, weights=weights.sub)
} else if (estmethod=="qreg") {
model <- do.call(rq, c(list(formula=y.sub ~ P-1, tau=quantile, weights=weights.sub), estmethodopt))
} else if (estmethod=="glm") {
model <- do.call(glm, c(list(formula=y.sub ~ P-1, family=family, weights=weights.sub), estmethodopt))
}
} else {
est.p <- tsha.p; est.s <- tsha.s
}
basis.sha <- binsreg.spdes(eval=dots_grid, p=est.p, s=est.s, knot=knot, deriv=deriv)  # possibly based on a different grid
if (estmethod=="glm" & (!nolink)) {
pred.sha <- binsreg.pred(X=basis.sha, model=model, type="xb",
vce=vce, cluster=cluster.sub, deriv=deriv, wvec=eval.w, avar=asyvar)
if (deriv==0) dots.fit[[i]] <- linkinv(pred.sha$fit)
if (deriv==1) {
basis.0     <- binsreg.spdes(eval=dots_grid, p=est.p, s=est.s, knot=knot, deriv=0)
fit.0       <- binsreg.pred(basis.0, model, type = "xb", vce=vce, cluster=cluster.sub, deriv=0, wvec=eval.w)$fit
pred.sha.0  <- linkinv.1(fit.0)
dots.fit[[i]] <- pred.sha.0 * pred.sha$fit
}
} else {
if (estmethod=="qreg") {
dots.fit[[i]] <- binsreg.pred(basis.sha, model, type = "xb", vce=vce,
cluster=cluster.sub, deriv=deriv, wvec=eval.w,
is.qreg=TRUE, avar=asyvar, ...)$fit
} else {
dots.fit[[i]] <- binsreg.pred(basis.sha, model, type = "xb", vce=vce,
cluster=cluster.sub, deriv=deriv, wvec=eval.w, avar=asyvar)$fit
}
}
}
# second loop over 1:(i-1)
if (i>1) {
for (j in 1:(i-1)) {
# tests
if (testtype=="left") {
tstat[counter,] <- c(max((fit.sha[[i]]-fit.sha[[j]]) / sqrt(se.sha[[i]]^2+se.sha[[j]]^2)), i, j)
} else if (testtype=="right") {
tstat[counter,] <- c(min((fit.sha[[i]]-fit.sha[[j]]) / sqrt(se.sha[[i]]^2+se.sha[[j]]^2)), i, j)
} else {
if (is.infinite(lp)) {
tstat[counter,] <- c(max(abs((fit.sha[[i]]-fit.sha[[j]]) / sqrt(se.sha[[i]]^2+se.sha[[j]]^2))), i, j)
} else {
tstat[counter,] <- c(mean(((fit.sha[[i]]-fit.sha[[j]]) / sqrt(se.sha[[i]]^2+se.sha[[j]]^2))^lp)^(1/lp), i, j)
}
}
binspwc.simul <- binspwc.pval(nummat[[i]], nummat[[j]], denom[[i]], denom[[j]], nsims, tstat=tstat[counter,1], testtype=testtype, lp=lp, alpha=level)
pval[counter,1] <- binspwc.simul$pval
cval.cb[counter,1] <- binspwc.simul$cval.cb
# plot
if (plot) {
data.pwc <- list()
if (dotsngrid!=0) {
diff.fit <- dots.fit[[i]] - dots.fit[[j]]
data.dots <- data.frame(group=paste(byvals[i], "-", byvals[j], sep=" "), x=dots_grid, fit=diff.fit)
} else {
data.dots <- NULL
}
cb.cen <- fit.sha[[i]] - fit.sha[[j]]
cb.se  <- sqrt(se.sha[[i]]^2+se.sha[[j]]^2)
data.cb <- data.frame(group=paste(byvals[i], "-", byvals[j], sep=" "), x=uni_grid,
fit=cb.cen, se=cb.se,
cb.l=cb.cen-cval.cb[counter,1]*cb.se, cb.r=cb.cen+cval.cb[counter,1]*cb.se)
data.pwc$data.dots <- data.dots
data.pwc$data.cb   <- data.cb
data.plot[[counter]] <- data.pwc
names(data.plot)[counter] <- paste("Group", byvals[i], "-", "Group", byvals[j], sep=" ")
}
counter <- counter+1
}
}
}
library(binsreg)
library(binsreg)
help(binspwc)
library(binsreg)
help(binspwc)
install.packages("ndiMatrix")
library(Matrix)
library(binsreg)
library(binsreg)
library(binsreg)
library(binsreg)
x <- runif(500); y <- sin(x)+rnorm(500); t <- 1*(runif(500)>0.5)
t[1:100]=2
binspwc(y,x,by=t)
binspwc(y,x,by=t, plot=T)
binspwc(y,x,by=t, plot=T, dotsngrid=10)
binspwc(y,x,binsp=1, binss=1, by=t, plot=T, dotsngrid=10)
binspwc(y,x,bins=c(1,1), by=t, plot=T, dotsngrid=10)
binspwc(y,x,bins=c(1,1), by=t, plot=T, dotsngrid=10)
binspwc(y,x,bins=c(1,1), pwc=c(3,3), by=t, plot=T, dotsngrid=10)
summary(binspwc(y,x,bins=c(1,1), pwc=c(3,3), by=t, plot=T, dotsngrid=10))
summary(binspwc(y,x,bins=c(0,0), pwc=c(0,0), by=t, plot=T, dotsngrid=10))
summary(binspwc(y,x,pwc=3, by=t, plot=T))
summary(binspwc(y,x,pwc=3, by=t, plot=T, samebinsby = T))
binspwc(y,x,pwc=3, by=t, plot=T, samebinsby = T)
binspwc(y,x,pwc=3, samebinsby = T)
binspwc(y,x,by=t, pwc=3, samebinsby = T)
binspwc(y,x,by=t, pwc=3)
binspwc(y,x,by=t, pwc=3, samebinsby = T)
binspwc(y,x,by=t, pwc=3, binspos=0.5, plot=3)
binspwc(y,x,by=t, pwc=3, nbins=1, plot=3)
binspwc(y,x,by=t, pwc=3, bynbins=1, plot=3)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=3)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=3)
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=3)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=3)
help(binsregselect)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=3)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=3)
t <- 1*(runif(500)>0.5)
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=T)
plot(y,x)
plot(x, y, type = "l", lty = 1)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=T)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=T)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=T)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=T)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=T)
devtools::load_all(".")
binspwc(y,x,by=t, pwc=3, samebinsby=T, plot=T, simsgrid = 200)
binspwc(y,x,by=t, pwc=3, bynbins=1, plot=T, simsgrid = 200)
binspwc(y,x,by=t, pwc=3, bynbins=2, plot=T, simsgrid = 200)
devtools::load_all(".")
binspwc(y,x,by=t,plot=T, simsgrid = 200, estmethod="qreg")
binspwc(y,x,by=t,plot=T, simsgrid = 200, estmethod="glm", family="binomial")
tt=y>mean(y)
binspwc(tt,x,by=t,plot=T, simsgrid = 200, estmethod="glm", family="binomial")
binspwc(tt,x,by=t,plot=T, simsgrid = 200, estmethod="glm", family="binomial", nolink=T)
help(binspwc)
library(binsreg)
help(binspwc)
help(binsqreg)
help(binstest)
